package com.sameermalik.hardwoodmod.event.loot;

import com.google.common.base.Suppliers;
import com.google.gson.JsonObject;
import com.mojang.serialization.Codec;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import it.unimi.dsi.fastutil.objects.ObjectArrayList;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.util.GsonHelper;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.storage.loot.LootContext;
import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
import net.minecraftforge.common.loot.IGlobalLootModifier;
import net.minecraftforge.common.loot.LootModifier;
import net.minecraftforge.registries.ForgeRegistries;
import org.jetbrains.annotations.NotNull;
import java.util.function.Supplier;

public class AddItemModifier extends LootModifier {

    public static final Supplier<Codec<AddItemModifier>> CODEC = Suppliers.memoize(
            () -> RecordCodecBuilder.create(
                    inst -> codecStart(inst)
                            .and(ForgeRegistries.ITEMS.getCodec().fieldOf("item").forGetter(m -> m.item))
                            // I got this from the documentation at https://docs.minecraftforge.net/en/1.19.x/resources/server/glm/
                            // scroll all the way the bottom the
                            /*
                                RecordCodecBuilder.create(
                                    inst -> LootModifier.codecStart(inst).and(
                                      inst.group(
                                        Codec.STRING.fieldOf("prop1").forGetter(m -> m.prop1),
                                        Codec.INT.fieldOf("prop2").forGetter(m -> m.prop2),
                                        ForgeRegistries.ITEMS.getCodec().fieldOf("prop3").forGetter(m -> m.prop3)
                                      )
                                    ).apply(inst, ExampleModifier::new)
                                  )
                             */
                            // now we can add our own custom fields to modify the global loot tables
                            .and(Codec.FLOAT.fieldOf("chance").forGetter(m -> m.chance))
                            .apply(inst, AddItemModifier::new))

    );

    private final Item item;
    private final float chance;

    // too make a new thing
    // 1. make a new json in data > hardwoodmod > loot_modifiers
    // 2 .follow same structure as withermelon_seeds_from.... the structure of the json is defined by the code above. The series of "ands"
    // 3. add the jason file to "entries" in the global_loot_modifier.json file in data > forge > loot_modifiers
    protected AddItemModifier(LootItemCondition[] conditionsIn, Item item, float chance){
        super(conditionsIn);
        this.item = item;
        this.chance = chance;
    }

                              /**
     * Applies the modifier to the generated loot (all loot conditions have already been checked
     * and have returned true).
     *
     * @param generatedLoot the list of ItemStacks that will be dropped, generated by loot tables
     * @param context       the LootContext, identical to what is passed to loot tables
     * @return modified loot drops
     */
                              @Override
    protected @NotNull ObjectArrayList<ItemStack> doApply(ObjectArrayList<ItemStack> generatedLoot, LootContext context) {
        return customDoApplyWithProbability(generatedLoot, context, chance);
    }

    private @NotNull ObjectArrayList<ItemStack> customDoApplyWithProbability(ObjectArrayList<ItemStack> generatedLoot, LootContext context, float chance){
                                  // chance determine the probability that an item will drop
        // this only encodes features for a single drop
        if(context.getRandom().nextFloat() <= chance){
            generatedLoot.add(new ItemStack(item));
        }
        // return the modified look table
        return generatedLoot;
    }

    /**
     * Returns the registered codec for this modifier
     */
    @Override
    public Codec<? extends IGlobalLootModifier> codec() {
        return CODEC.get();
    }
}
